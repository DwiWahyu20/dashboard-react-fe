{"version":3,"file":"server.js","sources":["../../sdk/wasp/dist/env/validation.js","../../sdk/wasp/dist/server/env.js","../../sdk/wasp/dist/universal/url.js","../../sdk/wasp/dist/server/config.js","../../sdk/wasp/dist/server/HttpError.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/index.js","../src/app.js","../src/polyfill.ts","../src/server.ts"],"sourcesContent":["import * as z from 'zod';\nconst redColor = '\\x1b[31m';\nexport function ensureEnvSchema(data, schema) {\n    try {\n        return schema.parse(data);\n    }\n    catch (e) {\n        if (e instanceof z.ZodError) {\n            const errorOutput = ['', '══ Env vars validation failed ══', ''];\n            for (const error of e.errors) {\n                errorOutput.push(` - ${error.message}`);\n            }\n            errorOutput.push('');\n            errorOutput.push('════════════════════════════════');\n            console.error(redColor, errorOutput.join('\\n'));\n            throw new Error('Error parsing environment variables');\n        }\n        else {\n            throw e;\n        }\n    }\n}\n//# sourceMappingURL=validation.js.map","import * as z from 'zod';\nimport { ensureEnvSchema } from '../env/validation.js';\nconst userServerEnvSchema = z.object({});\nconst waspServerCommonSchema = z.object({\n    PORT: z.coerce.number().default(3001),\n    DATABASE_URL: z.string({\n        required_error: 'DATABASE_URL is required',\n    }),\n    PG_BOSS_NEW_OPTIONS: z.string().optional(),\n    SKIP_EMAIL_VERIFICATION_IN_DEV: z\n        .enum(['true', 'false'], {\n        message: 'SKIP_EMAIL_VERIFICATION_IN_DEV must be either \"true\" or \"false\"',\n    })\n        .transform((value) => value === 'true')\n        .default('false'),\n});\nconst serverUrlSchema = z\n    .string({\n    required_error: 'WASP_SERVER_URL is required',\n})\n    .url({\n    message: 'WASP_SERVER_URL must be a valid URL',\n});\nconst clientUrlSchema = z\n    .string({\n    required_error: 'WASP_WEB_CLIENT_URL is required',\n})\n    .url({\n    message: 'WASP_WEB_CLIENT_URL must be a valid URL',\n});\n// In development, we provide default values for some environment variables\n// to make the development process easier.\nconst serverDevSchema = z.object({\n    NODE_ENV: z.literal('development'),\n    WASP_SERVER_URL: serverUrlSchema\n        .default('http://localhost:3001'),\n    WASP_WEB_CLIENT_URL: clientUrlSchema\n        .default('http://localhost:3000/'),\n});\nconst serverProdSchema = z.object({\n    NODE_ENV: z.literal('production'),\n    WASP_SERVER_URL: serverUrlSchema,\n    WASP_WEB_CLIENT_URL: clientUrlSchema,\n});\nconst serverCommonSchema = userServerEnvSchema.merge(waspServerCommonSchema);\nconst serverEnvSchema = z.discriminatedUnion('NODE_ENV', [\n    serverDevSchema.merge(serverCommonSchema),\n    serverProdSchema.merge(serverCommonSchema)\n]);\n// PUBLIC API\nexport const env = ensureEnvSchema(process.env, serverEnvSchema);\nfunction getRequiredEnvVarErrorMessage(featureName, envVarName) {\n    return `${envVarName} is required when using ${featureName}`;\n}\n//# sourceMappingURL=env.js.map","export function stripTrailingSlash(url) {\n    return url === null || url === void 0 ? void 0 : url.replace(/\\/$/, \"\");\n}\n//# sourceMappingURL=url.js.map","import { env } from './env.js';\nimport { stripTrailingSlash } from '../universal/url.js';\nconst frontendUrl = stripTrailingSlash(env.WASP_WEB_CLIENT_URL);\nconst serverUrl = stripTrailingSlash(env.WASP_SERVER_URL);\nconst allowedCORSOriginsPerEnv = {\n    development: '*',\n    production: [frontendUrl]\n};\nconst allowedCORSOrigins = allowedCORSOriginsPerEnv[env.NODE_ENV];\nconst config = {\n    frontendUrl,\n    serverUrl,\n    allowedCORSOrigins,\n    env: env.NODE_ENV,\n    isDevelopment: env.NODE_ENV === 'development',\n    port: env.PORT,\n    databaseUrl: env.DATABASE_URL,\n};\n// PUBLIC API\nexport default config;\n//# sourceMappingURL=config.js.map","export class HttpError extends Error {\n    constructor(statusCode, message, data, options) {\n        super(message, options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, HttpError);\n        }\n        this.name = this.constructor.name;\n        if (!(Number.isInteger(statusCode) && statusCode >= 400 && statusCode < 600)) {\n            throw new Error('statusCode has to be integer in range [400, 600).');\n        }\n        this.statusCode = statusCode;\n        if (data) {\n            this.data = data;\n        }\n    }\n}\n//# sourceMappingURL=HttpError.js.map","import express from 'express'\n\n\n\nconst router = express.Router()\n\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res, _next) {\n  res.json('Hello world')\n})\n\nrouter.use('/operations', middleware, operations)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","// This is a polyfill for Node.js 18 webcrypto API so Lucia can use it\n// for random number generation.\n\nimport { webcrypto } from 'node:crypto'\n\n// NOTE: node < 19 doesn't have Crypto API, which we need for Lucia, so we apply the polyfill if Crypto API is not defined.\nif (typeof globalThis.crypto === 'undefined') {\n  // @ts-ignore\n  globalThis.crypto = webcrypto as Crypto\n}\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\n\n\nimport './polyfill.js'\n\nconst startServer = async () => {\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["router","operations","indexRouter"],"mappings":"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"}